package com.tstine.fluidapp;

import android.os.Bundle;

import android.app.Activity;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLSurfaceView;
import android.opengl.GLES20;
import android.opengl.GLU;
import android.opengl.Matrix;

import java.nio.IntBuffer;
import java.nio.FloatBuffer;
import java.nio.ByteBuffer;
import java.nio.ShortBuffer;
import java.nio.*;

import android.util.Log;

import java.io.*;
import java.lang.*;
import java.util.Calendar;
import java.util.Random;
import java.lang.Math;

import android.content.Context;
import android.content.res.AssetManager;


public class FluidRenderer implements GLSurfaceView.Renderer{
	public static final String TAG = "FluidRenderer";
	public static Shader shader;
	public Context ctx;
	public float mx=0.0f, my=0.0f, omx=0.0f, omy=0.0f, dmx = 0.0f, dmy = 0.0f;

	public static boolean touched = false;
	public static boolean add_density_source = false;
	public static boolean add_velocity = true;
	
	private Calendar calendar;
	private static int frames = 0;
	private static long T0 = 0;
	private float[] mvp_matrix = new float[16];
	private float[] projection_matrix = new float[16];
	private float[] modelview_matrix = new float[16];
	private final int coords_per_vertex = 3;
	private final int colors_per_vertex = 4;
	private final int vertex_stride = coords_per_vertex * 4;
	private final int color_stride = colors_per_vertex * 4;

	private int mvp_matrix_handle;

	public int m_width = 0;
	public int m_height = 0;

	private static float[] vertices;
	private static short [] indices;
	private static float[] colors;
	private static final float[] color = { 1.0f, 0.0f, 0.0f, 1.0f };
	private static FloatBuffer vert_buffer;
	private static FloatBuffer color_buffer;
	private static ShortBuffer indices_buffer;


	private final static int N = FluidSimulator.N;
	private final static int num_vertices = N * N;
	private static float[] vertex_data;
	private static FloatBuffer vertex_buffer;
	private static int[] vbo_ids;
	
	private static final int float_size = 4;
	
	private static final int vertex_pos_len = 3;
	private static final int vertex_normal_len = 3;
	private static final int vertex_color_len = 3;
	private static final int vertex_texcoord_len = 2;

	private static final int vertex_pos_idx = 0;
	private static final int vertex_normal_idx = 1;
	private static final int vertex_color_idx = 2;
	private static final int vertex_texcoord_idx = 3;

	private static final int vertex_attrib_len = vertex_pos_len +
		vertex_normal_len + vertex_color_len + vertex_texcoord_len;
	
	private static final int vertex_offset = vertex_attrib_len * float_size;
	private static final int vertex_array_len = vertex_attrib_len * num_vertices;
	private static final int vertex_array_size = vertex_attrib_len * num_vertices * float_size;
		

	public FluidRenderer(Context context){
		this.ctx = context;
		shader.ctx = context;
		try{
			vertices =
				new float[3*( ( FluidSimulator.N+2 )*( FluidSimulator.N+2 ) )];
			indices =
				new short[ 3*2*(( FluidSimulator.N+1 )*( FluidSimulator.N+1 ) )];
			colors =
				new float[ 4 * ( ( FluidSimulator.N+2 )*( FluidSimulator.N+2 ) )];
		}catch(Exception e){
			Log.e( TAG, (e.getStackTrace()).toString() );
		}catch( OutOfMemoryError e ){
			Log.e(TAG, "Out of memory");
		}
	
		
	}
	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config){
		//Log.d(TAG, "fs: " + FluidSimulator.N );
		GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		shader.load();
		create_vertices();
		GLES20.glGenBuffers( 2, vbo_ids, 0 );
		GLES20.glBindBuffer( GL_ARRAY_BUFFER, 


		ByteBuffer v_bb = ByteBuffer.allocateDirect( vertices.length * 4 );
		ByteBuffer c_bb = ByteBuffer.allocateDirect( colors.length * 4 );
		ByteBuffer ind_bb = ByteBuffer.allocateDirect( indices.length * 2); 
		v_bb.order(ByteOrder.nativeOrder());
		c_bb.order(ByteOrder.nativeOrder());
		ind_bb.order(ByteOrder.nativeOrder());
		vert_buffer = v_bb.asFloatBuffer();
		color_buffer = c_bb.asFloatBuffer();
		indices_buffer = ind_bb.asShortBuffer();
		vert_buffer.put( vertices );
		color_buffer.put( colors );
		indices_buffer.put( indices );
		vert_buffer.position(0);
		color_buffer.position(0);
		indices_buffer.position(0);

	}
	
	@Override
	public void onDrawFrame(GL10 gl){
		render();
		get_from_ui();
		FluidSimulator.step();
		calculate_fps();

	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height){
		m_width = width;
		m_height = height;
		GLES20.glViewport( 0, 0, width, height );
		float aspect = (float)width/height;
		Matrix.setIdentityM(projection_matrix, 0);
		/*		Matrix.perspectiveM(projection_matrix,
												0,
												65.0f,
											aspect,
											.01f,
											100.0f);*/
		Matrix.orthoM( projection_matrix,
									 0,
									 -1, 1,
									 -1, 1,
									 0.1f, 100.0f );
	}


	public void get_from_ui(){

		int i;
		int N = FluidSimulator.N;
		for(i=0; i< FluidSimulator.size; i++){
			FluidSimulator.u0[i] = FluidSimulator.v0[i] = FluidSimulator.d0[i] = 0.0f;
		}

		//	x_cell = x_cell > FluidSimulator.N ? FluidSimulator.N : x_cell;
		//		x_cell = x_cell < 1 ? 1 : x_cell;
		//		y_cell = y_cell > FluidSimulator.N ? FluidSimulator.N : y_cell;
		//		y_cell = y_cell < 1 ? 1 : y_cell;
		
		//int sim_loc = FluidSimulator.AT( x_cell,y_cell );
		//		Log.d(TAG, "x/y cell: ( " + x_cell + ", " + y_cell + " )" );
		//Log.d(TAG, "mx/my : ( "  + mx + ", " + my + " )" );
		//Log.d(TAG, "sim_loc: " + sim_loc);

		/*
		float delta_density = 200.0f;
		float delta_velocity = 100.0f;
		float dist = ( float )Math.sqrt( Math.pow( mx - dmx,2 ) + Math.pow( my - dmy, 2) );

		if(touched){
			if( dist > delta_density ) {
				add_density_source = true;
			}
			if( dist > delta_velocity ){
				add_velocity = true;
			}
		}else{
			add_density_source = false;
			add_velocity = false;
			dmy = my;
			dmx = mx;
		}
		
		if( add_density_source ){

		}
		if( add_velocity ){

			}*/
		float delta = 5.0f;
		float dist = ( float )Math.sqrt( Math.pow( mx - omx,2 ) + Math.pow( my - omy, 2) );

		if(touched && dist > delta){
			int x_cell = (int)( ( omx/(float)m_width )*N+1 );
			int y_cell = (int) ( ( (m_height-omy )/(float)m_height )*N+1 );

			x_cell = clamp( x_cell, 1, N );
			y_cell = clamp( y_cell, 1, N );
			if(x_cell >= 1 || x_cell <= N || y_cell >= 1 || y_cell <= N) {

				FluidSimulator.d0[FluidSimulator.AT( x_cell,y_cell )] = FluidSimulator.source_add;
				FluidSimulator.u0[FluidSimulator.AT( x_cell,y_cell )] = FluidSimulator.force * ( mx - omx );
				FluidSimulator.v0[FluidSimulator.AT( x_cell,y_cell )] = FluidSimulator.force * -( my - omy );
			}
		}
		omx = mx;
		omy = my;
	}

	public void render(){
		GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
		GLES20.glUseProgram(Shader.program_handle);
		set_mvp_matrix();
		render_triangle();
		//render_simulator();
		//GLES20.glDeleteProgram( Shader.program_handle );
	}

	public void set_mvp_matrix(){
		Matrix.setIdentityM(modelview_matrix, 0);
		Matrix.setLookAtM(modelview_matrix, 0,
											0, 0, 3,
											0, 0, 0,
											0, 1, 0);
		Matrix.multiplyMM(mvp_matrix, 0, projection_matrix, 0, modelview_matrix, 0);

		mvp_matrix_handle = GLES20.glGetUniformLocation(Shader.program_handle, "mvp_matrix");
		FluidRenderer.checkGlError("glGetUniformLocation");
		GLES20.glUniformMatrix4fv(mvp_matrix_handle, 1, false, mvp_matrix, 0);
		FluidRenderer.checkGlError("glUniformMatrix4fv");		
	}

	public void render_simulator(){
		set_colors();
		int position_handle = GLES20.glGetAttribLocation(Shader.program_handle,
																										 "vPosition");
		int color_handle = GLES20.glGetAttribLocation(Shader.program_handle,
																									"vColor");

		GLES20.glEnableVertexAttribArray( position_handle );
		GLES20.glEnableVertexAttribArray( color_handle );
		
		GLES20.glVertexAttribPointer( position_handle, coords_per_vertex,
																	GLES20.GL_FLOAT, false,
																	vertex_stride, vert_buffer );

		GLES20.glVertexAttribPointer( color_handle, colors_per_vertex,
																	GLES20.GL_FLOAT, false,
																	color_stride, color_buffer );


		GLES20.glDrawElements(GLES20.GL_TRIANGLES, indices.length,
													GLES20.GL_UNSIGNED_SHORT, indices_buffer );
		GLES20.glDisableVertexAttribArray( position_handle );
		GLES20.glDisableVertexAttribArray( color_handle );

	}
	public void set_colors(){
		int i,j,c_idx=0;
		int N = FluidSimulator.N;
		float d;
		Random rand = new Random();
		for(j=0; j< N+2; j++){
			for(i=0; i< N+2; i++){
				//Log.d(TAG, "i= " + i + "j= " + j);
				d = FluidSimulator.d[FluidSimulator.AT(i,j)];
				colors[c_idx++] = d;
				colors[c_idx++] = d;
				colors[c_idx++] = d;
				colors[c_idx++] = 1.0f;
			}
		}
		color_buffer.position(0);
		color_buffer.put( colors );
		color_buffer.position(0);
	}

	public void render_triangle(){
		float[] tri_vertices = {-1.0f, -1.0f, 0.0f,
														1.0f,  0.0f, 0.0f,
														-1.0f, 1.0f, 0.0f};
		float[] tri_colors = {1.0f, 0.0f, 0.0f, 1.0f,
													0.0f, 1.0f, 0.0f, 1.0f,
													0.0f, 0.0f, 1.0f, 1.0f};
		ByteBuffer v_bb = ByteBuffer.allocateDirect( tri_vertices.length * 4 );
		ByteBuffer c_bb = ByteBuffer.allocateDirect( tri_colors.length * 4 );
		v_bb.order(ByteOrder.nativeOrder());
		c_bb.order(ByteOrder.nativeOrder());
		FloatBuffer vert_buffer = v_bb.asFloatBuffer();
		FloatBuffer color_buffer = c_bb.asFloatBuffer();
		vert_buffer.put(tri_vertices);
		color_buffer.put(tri_colors);
		vert_buffer.position(0);
		color_buffer.position(0);

		int position_handle = GLES20.glGetAttribLocation(Shader.program_handle, "vPosition");
		int color_handle = GLES20.glGetAttribLocation(Shader.program_handle, "vColor");

		GLES20.glEnableVertexAttribArray( position_handle );
		GLES20.glEnableVertexAttribArray( color_handle );
		GLES20.glVertexAttribPointer( position_handle, coords_per_vertex,
																 GLES20.GL_FLOAT, false,
																 vertex_stride, vert_buffer);

		GLES20.glVertexAttribPointer( color_handle, colors_per_vertex,
																GLES20.GL_FLOAT, false,
																color_stride, color_buffer );

		GLES20.glDrawArrays( GLES20.GL_TRIANGLES, 0, 3 );
		GLES20.glDisableVertexAttribArray( position_handle );
		GLES20.glDisableVertexAttribArray( color_handle );

	}

	public void calculate_fps(){
		frames++;
		calendar = Calendar.getInstance();
		long t = calendar.getTimeInMillis();
		if(t - T0 >= 5000){
			float seconds = (float)(t-T0)/1000.0f;
			float fps = frames/seconds;
			Log.d(TAG, frames + " frame in "+ seconds + " seconds = " +
						fps + " FPS\n");
			T0 = t;
			frames = 0;
		}
	}
	private static void create_vertices(){
		int i,j;
		int v_idx=0, i_idx=0;
		int N = FluidSimulator.N;
		float h = 2.0f/(N);
		float x,y,d;
		for(j=0; j< N+2; j++){
			y = -1 + (j * h);
			for(i=0; i< N+2; i++){
				x = -1 + (i * h);
				vertices[v_idx++] = x;
				vertices[v_idx++] = y;
				vertices[v_idx++] = 0.0f;
				//Log.d(TAG, "(x= "+ x + ", y= " + y);
			}
		}
		for(j=0; j<N+1; j++){
			for(i=0; i<N+1; i++){
				
				indices[i_idx++] = (short)FluidSimulator.AT( i,j );
				indices[i_idx++] = (short)FluidSimulator.AT( i+1,j );
				indices[i_idx++] = (short)FluidSimulator.AT( i+1,j+1 );
				//Log.d(TAG, "( " + indices[i_idx-3] + ", " + indices[i_idx-2] + " ," + indices[i_idx-1] + " )");
				
				indices[i_idx++] = (short)FluidSimulator.AT( i,j );
				indices[i_idx++] = (short)FluidSimulator.AT( i+1,j+1 );
				indices[i_idx++] = (short)FluidSimulator.AT( i,j+1 );
				//Log.d(TAG, "( " + indices[i_idx-3] + ", " + indices[i_idx-2] + " ," + indices[i_idx-1] + " )");
				
			}
		}

		//Log.d(TAG, "i_idx: " + i_idx);
		//Log.d(TAG, "indices length= " + indices.length);
		//Log.d(TAG, "Last item: " + indices[i_idx-1]);
		

	}

    public static void checkGlError(String glOperation) {
        int error;
        while ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
            Log.e(TAG, glOperation + ": glError " + error);
            throw new RuntimeException(glOperation + ": glError " + error);
        }
    }

	public static int clamp(int value, int min, int max){
		value = value > max ? max : value;
		value = value < min ? 1 : value;
		return value;
	}


}


class Vertex{
	float x;
	float y;
	float z;
}

class Shader{
	public static int program_handle;
	public static Context ctx;

	public static void load(){
		Shader.load("vertex_shader.glsl", "fragment_shader.glsl");
	}
	public static void load(String vertex_filename, String fragment_filename){
		try{
			Shader.vertex_code = load_shader_code(vertex_filename);
		}catch (IOException e){
			Log.e(TAG, "ERROR OPENING SHADER CODE FILE");
		}
		try{
			Shader.fragment_code = load_shader_code(fragment_filename);
		}catch(IOException e){
			Log.e(TAG, "ERROR OPENING FRAGMENT CODE FILE");
		}
		Shader.vertex_handle = load_shader(Shader.vertex_code,
																			 GLES20.GL_VERTEX_SHADER);
		Shader.fragment_handle = load_shader(Shader.fragment_code,
																				 GLES20.GL_FRAGMENT_SHADER);
		Shader.load_program();
	}

	private static final String TAG = "FluidRenderer";
	private static int vertex_handle;
	private static String vertex_code;

	private static String fragment_code;
	private static int fragment_handle;

	public static String load_shader_code(String filename) throws IOException{
		BufferedReader reader =
			new BufferedReader(new InputStreamReader(ctx.getAssets().open(filename)));
		StringBuffer sb = new StringBuffer();
		String line = null;
		while((line = reader.readLine()) != null){
			sb.append(line).append("\n");
		}
		reader.close();
		return sb.toString();
	}
	
	private static void load_program(){
		Shader.program_handle = GLES20.glCreateProgram();
		GLES20.glAttachShader( Shader.program_handle, Shader.vertex_handle );
		GLES20.glAttachShader( Shader.program_handle, Shader.fragment_handle );
		GLES20.glLinkProgram( Shader.program_handle );
		int[] compiled = new int[1];
		GLES20.glGetProgramiv( Shader.program_handle, 
													 GLES20.GL_LINK_STATUS,
													 compiled,
													 0 );
		if( compiled[0] == GLES20.GL_FALSE ){
			Log.d(TAG, "Linking shader failed!");
			String program_failure_info = GLES20.glGetProgramInfoLog( Shader.program_handle);
		}
	}

	private static int load_shader(String shader_code, int type){
		int shader = GLES20.glCreateShader( type );
		GLES20.glShaderSource( shader, shader_code );
		GLES20.glCompileShader( shader );
		int[] compiled = { 10 };
		GLES20.glGetShaderiv( shader, GLES20.GL_SHADER_SOURCE_LENGTH, compiled, 0 );
		if( compiled[0] == GLES20.GL_FALSE ){
			Log.d(TAG, "Could not compile shader!");
			String shader_failure_info = GLES20.glGetShaderInfoLog( shader );
			Log.d(TAG, "failure info: " + shader_failure_info );
			GLES20.glDeleteShader( shader );
		}
		return shader;
	}



}
